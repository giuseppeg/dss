module.exports=__NEXT_REGISTER_PAGE("/webpack",function(){return{page:webpackJsonp([2],{263:function(e,n,a){e.exports=a(264)},264:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=a(0),s=a.n(t),o=a(13);n.default=function(e){var n=e.components;return s.a.createElement(o.MDXTag,{name:"wrapper"},s.a.createElement(o.MDXTag,{name:"h1",components:n},"webpack ğŸ“¦"),s.a.createElement(o.MDXTag,{name:"p",components:n},"DSS comes with a webpack loader and plugin and since it works similarly to CSS Modules can leverage existing tools like ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"extract-text-webpack-plugin")," (webpack 3) and ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mini-css-extract-plugin")," (webpack 4) to allow you to easily compile your styles."),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre"},"npm i --save-dev dss-webpack\n")),s.a.createElement(o.MDXTag,{name:"p",components:n},s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"dss-webpack")," exports a plugin which optimizes your final bundle after extraction, and a loader that compiles your styles."),s.a.createElement(o.MDXTag,{name:"h2",components:n},"webpack 3"),s.a.createElement(o.MDXTag,{name:"p",components:n},"For webpack 3 you might want to use ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"extract-text-webpack-plugin")),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-js"]}},"const path = require('path')\nconst HtmlwebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst DSSwebpackPlugin = require('dss-webpack')\n\nconst localIdentName =\n  process.env.NODE_ENV === 'production' ? 'DSS-[hash:base32]' : '[name]-[local]--[hash:base32:5]'\n\nconst config = {\n  entry: path.resolve('./src/index.js'),\n  output: {\n    path: path.resolve('./dist'),\n    filename: '[name].js',\n  },\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: ExtractTextPlugin.extract({\n          use: [\n            // This plugin is similar to the css-loader for CSS Modules\n            {\n              loader: DSSwebpackPlugin.loader,\n              query: {\n                // optional, adds readable classnames\n                localIdentName,\n              },\n            },\n          ],\n        }),\n      },\n    ],\n  },\n  plugins: [\n    new HtmlwebpackPlugin({\n      template: path.resolve('./src/index.html'),\n    }),\n    new ExtractTextPlugin('index.css'),\n\n    // Important! Optimizes your DSS styles - always include this.\n    new DSSwebpackPlugin({\n      test: /index.css$/,\n    }),\n  ],\n}\n\nmodule.exports = config\n")),s.a.createElement(o.MDXTag,{name:"h2",components:n},"webpack 4"),s.a.createElement(o.MDXTag,{name:"p",components:n},"For webpack 4 you might want to use ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mini-css-extract-plugin")),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-js"]}},"const path = require('path')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst HtmlwebpackPlugin = require('html-webpack-plugin')\nconst DSSwebpackPlugin = require('dss-webpack')\n\nconst localIdentName =\n  process.env.NODE_ENV === 'production' ? 'DSS-[hash:base32]' : '[name]-[local]--[hash:base32:5]'\nconst mode = process.env.NODE_ENV || 'development'\n\nconst config = {\n  mode,\n  entry: path.resolve('./src/index.js'),\n  output: {\n    path: path.resolve('./dist'),\n    filename: '[name].js',\n  },\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            // This plugin is similar to the css-loader for CSS Modules\n            loader: DSSwebpackPlugin.loader,\n            query: {\n              // optional, adds readable classnames\n              localIdentName,\n            },\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlwebpackPlugin({\n      template: path.resolve('./src/index.html'),\n    }),\n    new MiniCssExtractPlugin({\n      filename: 'index.css',\n    }),\n\n    // Important! Optimizes your DSS styles - always include this.\n    new DSSwebpackPlugin({\n      test: /index.css$/,\n    }),\n  ],\n}\n\nmodule.exports = config\n")),s.a.createElement(o.MDXTag,{name:"h2",components:n},"with SASS"),s.a.createElement(o.MDXTag,{name:"p",components:n},"The webpack configuration looks exactly the same as the previous ones except that now we test for ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"scss")," files and run the ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sass-loader")," before the dss loader."),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-js"]}},"rules: [\n  {\n    test: /.scss$/,\n    use: [\n      MiniCssExtractPlugin.loader,\n      {\n        // This plugin is similar to the css-loader for CSS Modules\n        loader: DSSwebpackPlugin.loader,\n        query: {\n          // optional, adds readable classnames\n          localIdentName,\n        },\n      },\n\n      // Compile sass before using DSSwebpackPlugin.loader\n      {\n        loader: 'sass-loader',\n        options: {\n          sourceMaps: false,\n        },\n      }\n\n    ],\n  },\n]\n")),s.a.createElement(o.MDXTag,{name:"h2",components:n},"with PostCSS"),s.a.createElement(o.MDXTag,{name:"p",components:n},"The webpack configuration looks exactly the same as the previous ones except that now we run the ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"postcss-loader")," before the dss loader."),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-js"]}},"rules: [\n  {\n    test: /.css$/,\n    use: [\n      MiniCssExtractPlugin.loader,\n      {\n        // This plugin is similar to the css-loader for CSS Modules\n        loader: DSSwebpackPlugin.loader,\n        query: {\n          // optional, adds readable classnames\n          localIdentName,\n        },\n      },\n\n      // Compile the CSS with PostCSS\n      {\n        loader: 'postcss-loader',\n        options: {\n          // Configure here the plugins or\n          // omit this option if you have a `postcss.config.js` file\n          plugins: () => [\n            require('postcss-easy-import')(),\n            require('postcss-simple-vars')({ variables: () => require('./theme') })\n            // ...\n          ],\n        },\n      }\n\n    ],\n  },\n]\n")))}}},[263]).default}});