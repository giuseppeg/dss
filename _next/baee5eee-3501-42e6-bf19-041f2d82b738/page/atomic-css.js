module.exports=__NEXT_REGISTER_PAGE("/atomic-css",function(){return{page:webpackJsonp([10],{246:function(e,n,a){e.exports=a(247)},247:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=a(0),s=a.n(t),o=a(13);n.default=function(e){var n=e.components;return s.a.createElement(o.MDXTag,{name:"wrapper"},s.a.createElement(o.MDXTag,{name:"h1",components:n},"Atomic CSS classes and smaller bundles ⚡️ 📦"),s.a.createElement(o.MDXTag,{name:"p",components:n},"The DSS compiler converts every CSS declaration to an atomic CSS classes and returns a JSON object that contains mappings to the source rules."),s.a.createElement(o.MDXTag,{name:"p",components:n},"Since we are using atomic CSS classes, ",s.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"declarations are deduped")," and the final bundle size should be small. With atomic CSS classes the ",s.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"file size growth is logarithmic")," since DSS produces rules only for new declarations. This strategy also makes critical CSS extraction unnecessary."),s.a.createElement(o.MDXTag,{name:"h2",components:n},"How it works"),s.a.createElement(o.MDXTag,{name:"p",components:n},"Given some CSS:"),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-css"]}},"/* index.css */\n\n.foo {\n  display: flex;\n  flex-direction: column;\n  color: red;\n}\n\n.bar {\n  display: flex;\n  color: green;\n}\n")),s.a.createElement(o.MDXTag,{name:"p",components:n},"the DSS compiler converts everything to atomic CSS classes and returns a ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Promise")," that resolves with an object that looks like the following:"),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre"},"{\n  locals,\n  css,\n  flush,\n}\n")),s.a.createElement(o.MDXTag,{name:"h3",components:n},"locals"),s.a.createElement(o.MDXTag,{name:"p",components:n},s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"locals")," is an object where each ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"selector")," is mapped to an array of atomic CSS classes:"),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-JSON"]}},'{\n "foo": [\n    "dss_14e3233-fkmc3a",\n    "dss_1uacqdt-m23pbg",\n    "dss_rfc3hq-169mlyl"\n  ],\n  "bar": [\n    "dss_14e3233-fkmc3a",\n    "dss_rfc3hq-5rjgso"\n  ]\n}\n')),s.a.createElement(o.MDXTag,{name:"p",components:n},"Locals should be written to disk as ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"json")," as each CSS file is processed by DSS."),s.a.createElement(o.MDXTag,{name:"h3",components:n},"css"),s.a.createElement(o.MDXTag,{name:"p",components:n},s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css")," is a function that returns the generated CSS."),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:["language-css"]}},"/* css() */\n\n.dss_14e3233-fkmc3a{display:flex}\n.dss_1uacqdt-m23pbg{flex-direction:column}\n.dss_rfc3hq-169mlyl{color:red}\n.dss_rfc3hq-5rjgso{color:green}\n")),s.a.createElement(o.MDXTag,{name:"p",components:n},"When compiling multiple files ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css")," should be called at the end, only after all the files have been processed. This is because DSS collects rules as the files are processed."),s.a.createElement(o.MDXTag,{name:"h3",components:n},"flush"),s.a.createElement(o.MDXTag,{name:"p",components:n},s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flush")," is like ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css")," except that it resets the internal collection of styles. When calling ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css")," multiple times you always get the latest styles. Instead if you call ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flush")," subsequent calls of either ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css")," or ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flush")," will return an empty string."),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre"},"css()\n// .dss_14e3233-fkmc3a{display:flex}\ncss()\n// .dss_14e3233-fkmc3a{display:flex}\n\nflush()\n// .dss_14e3233-fkmc3a{display:flex}\n\ncss()\n// ''\n\nflush()\n// ''\n")),s.a.createElement(o.MDXTag,{name:"h3",components:n},"Putting everything together"),s.a.createElement(o.MDXTag,{name:"pre",components:n},s.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre"},"const fs = require('fs')\nconst dss = require('dss-compiler').singleton\n\nlet getCSS\n\nconst source1 = fs.readFileSync('./component1/styles.css')\n\nconst first = dss(source).then(({ locals }) => {\n  // locals contains the JSON above\n  fs.writeFileSync('./component1/styles.css.json', JSON.stringify(locals))\n})\n\nconst source2 = fs.readFileSync('./component2/styles.css')\n\nconst second = dss(source).then(({ locals, css, flush }) => {\n  fs.writeFileSync('./component2/styles.css.json', JSON.stringify(locals))\n\n  getCSS = flush\n})\n\nPromise.all([first, second]).then(() => {\n  fs.writeFileSync('./bundle.css', getCSS())\n})\n")),s.a.createElement(o.MDXTag,{name:"p",components:n},"When compiling multiple files, the JSON for each file should be written to disk and at the end of the compilation the CSS generated by DSS is available via a dss' ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css()")," call. The string returned by ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css")," contains the entire app CSS."),s.a.createElement(o.MDXTag,{name:"p",components:n},s.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Note")," that DSS comes with a CLI and a Webpack loader/plugin that automates the process above, so that you can chill and just focus on writing styles!"))}}},[246]).default}});